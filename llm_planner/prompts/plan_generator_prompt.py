#!/usr/bin/env python3
"""
üéØ PROMPT JSON STRICT - G√âN√âRATEUR DE PLANS LLM
===============================================

Template de prompt strict pour g√©n√©rer des plans JSON valides.
Garantit la coh√©rence et la qualit√© des plans g√©n√©r√©s par le LLM.

Crit√®res d'acceptation :
- Prompt JSON strict d√©fini
- Instructions claires
- Exemples de plans valides
- Dates dynamiques bas√©es sur la date r√©elle
"""

import json
from typing import Dict, Any
from datetime import datetime, timedelta

class PlanGeneratorPrompt:
    """G√©n√©rateur de prompts JSON stricts pour le LLM"""
    
    # Outils MCP disponibles (correspondent exactement aux outils du BLOC 3)
    AVAILABLE_TOOLS = {
        'aggregate': {
            'description': 'Agr√©ger les donn√©es √©nerg√©tiques par p√©riode',
            'parameters': {
                'period': 'P√©riode (ex: "1d", "7d", "30d", "month", "year", "current_day", "current_week", "current_month", "current_year", "last_day", "last_week", "last_month", "last_year")',
                'aggregation': 'Type d\'agr√©gation (ex: "sum", "mean", "max", "min")',
                'filters': 'Filtres optionnels'
            }
        },
        'forecast': {
            'description': 'G√©n√©rer des pr√©visions √©nerg√©tiques',
            'parameters': {
                'horizon': 'Horizon de pr√©vision (ex: "7d", "30d", "90d")',
                'model': 'Mod√®le √† utiliser (ex: "simple", "trend", "seasonal")'
            }
        },
        'peak': {
            'description': 'D√©tecter les pics de consommation',
            'parameters': {
                'threshold': 'Seuil de d√©tection (ex: 2.0)',
                'period': 'P√©riode d\'analyse (ex: "7d", "30d")'
            }
        },
        'cost': {
            'description': 'Estimer les co√ªts √©nerg√©tiques',
            'parameters': {
                'tariff': 'Tarif par kWh (ex: 0.20)',
                'period': 'P√©riode de calcul (ex: "7d", "30d", "month")'
            }
        },
        'anomaly': {
            'description': 'D√©tecter les anomalies de consommation',
            'parameters': {
                'threshold': 'Seuil de d√©tection (nombre d√©cimal, ex: 2.0)',
                'method': 'M√©thode (ex: "zscore", "iqr", "threshold")'
            }
        },
        'plot': {
            'description': 'Cr√©er des visualisations',
            'parameters': {
                'chart_type': 'Type de graphique (ex: "consumption_overview", "cost_analysis", "anomaly_dashboard", "forecast_dashboard", "time_analysis", "sub_metering")',
                'period': 'P√©riode pour le graphique (optionnel)',
                'tariff': 'Tarif pour les graphiques de co√ªts (optionnel)',
                'threshold': 'Seuil pour les graphiques d\'anomalies (optionnel)'
            }
        }
    }
    
    @classmethod
    def _get_dynamic_dates(cls) -> Dict[str, str]:
        """Calcule les dates dynamiques bas√©es sur la date r√©elle"""
        today = datetime.now()
        yesterday = today - timedelta(days=1)
        last_week_start = today - timedelta(days=7)
        last_month_start = today - timedelta(days=30)
        
        return {
            "today": today.strftime("%d/%m/%Y"),
            "yesterday": yesterday.strftime("%d/%m/%Y"),
            "last_week_start": last_week_start.strftime("%d/%m/%Y"),
            "last_month_start": last_month_start.strftime("%d/%m/%Y"),
            "current_month": today.strftime("%B %Y"),
            "last_month": yesterday.replace(day=1).strftime("%B %Y")
        }
    
    @classmethod
    def _get_db_period(cls) -> Dict[str, str]:
        """R√©cup√®re la p√©riode depuis DuckDB"""
        try:
            from mcp_server.core.database_manager import get_database_manager
            db_manager = get_database_manager()
            
            query = "SELECT MIN(timestamp), MAX(timestamp) FROM energy_data"
            result = db_manager.execute_query(query)
            
            if result is not None and not result.empty:
                start_date = result.iloc[0]['MIN(timestamp)'].strftime('%d/%m/%Y')
                end_date = result.iloc[0]['MAX(timestamp)'].strftime('%d/%m/%Y')
                
                return {
                    "start": start_date,
                    "end": end_date
                }
        except Exception as e:
            # Fallback en cas d'erreur
            return {
                "start": "16/12/2023",
                "end": "30/08/2025"
            }
        
        # Fallback par d√©faut
        return {
            "start": "16/12/2023",
            "end": "30/08/2025"
        }
    
    @classmethod
    def get_system_prompt(cls) -> str:
        """Retourne le prompt syst√®me principal avec dates dynamiques"""
        
        # Calculer les dates dynamiques
        dates = cls._get_dynamic_dates()
        db_period = cls._get_db_period()
        
        return f"""Tu es un planificateur expert pour l'analyse √©nerg√©tique. Tu g√©n√®res des plans JSON structur√©s pour r√©pondre aux questions des utilisateurs.

CONTEXTE DES DONN√âES :
- P√©riode : {db_period['start']} ‚Üí {db_period['end']}
- Granularit√© : Agr√©gation 2h
- Donn√©es : Consommation √©lectrique en kWh

LOGIQUE TEMPORELLE DYNAMIQUE (bas√©e sur la date r√©elle {dates['today']}) :
- "aujourd'hui" = {dates['today']} ‚Üí utiliser "current_day"
- "hier" = {dates['yesterday']} ‚Üí utiliser "last_day"
- "cette semaine" = {dates['last_week_start']} ‚Üí {dates['today']} ‚Üí utiliser "current_week"
- "ce mois" = {dates['current_month']} ‚Üí utiliser "current_month"
- "cette ann√©e" = {dates['current_month']} ‚Üí utiliser "current_year"
- "mois dernier" = {dates['last_month']} ‚Üí utiliser "last_month"

HEURISTIQUES INTELLIGENTES :
- "moyenne par jour" ‚Üí utiliser "current_year" (ann√©e en cours)
- "consommation quotidienne" ‚Üí utiliser "current_year"
- "par jour" ‚Üí utiliser "current_year"

R√àGLES STRICTES :
1. Tu g√©n√®res UNIQUEMENT des plans JSON valides
2. Tu n'ex√©cutes JAMAIS d'outils directement
3. Tu utilises SEULEMENT les outils disponibles
4. Tu respectes les d√©pendances entre √©tapes
5. Tu estimes la complexit√© et la dur√©e
6. Tu respectes la logique temporelle dynamique ci-dessus
7. Tu utilises TOUJOURS des p√©riodes relatives ("1d", "7d", "month") et JAMAIS de dates fixes

OUTILS DISPONIBLES :
{json.dumps(cls.AVAILABLE_TOOLS, indent=2, ensure_ascii=False)}

STRUCTURE JSON OBLIGATOIRE :
{{
    "metadata": {{
        "plan_id": "plan_XXX",
        "question_type": "history|forecast|comparison|costs|anomalies",
        "complexity": "simple|medium|complex",
        "estimated_duration": <secondes>
    }},
    "steps": [
        {{
            "step_id": <num√©ro>,
            "tool_name": "<nom_outil>",
            "description": "<description_claire>",
            "parameters": {{<param√®tres>}},
            "depends_on": [<√©tapes_pr√©alables>]
        }}
    ],
    "summary": "<r√©sum√©_du_plan>"
}}

EXEMPLES DE PLANS VALIDES :
1. Question simple : "Quelle est ma consommation des 7 derniers jours ?"
   ‚Üí Plan simple avec 1 √©tape (aggregate avec period: "7d")

2. Question complexe : "Pr√©vois ma consommation pour les 30 prochains jours"
   ‚Üí Plan complexe avec 3 √©tapes (aggregate ‚Üí forecast ‚Üí plot)

IMPORTANT : 
- R√©ponds UNIQUEMENT avec le JSON du plan, sans commentaires suppl√©mentaires
- Utilise TOUJOURS des p√©riodes relatives (1d, 7d, month, year) et JAMAIS de dates fixes
- Les dates dynamiques ci-dessus sont bas√©es sur la date r√©elle d'ex√©cution : {dates['today']}"""

    @classmethod
    def get_user_prompt(cls, question: str) -> str:
        """Retourne le prompt utilisateur pour une question donn√©e"""
        return f"""Question utilisateur : "{question}"

CONTEXTE M√âTIER IMPORTANT :
- Pour les moyennes de consommation : utiliser "sum" + post_processing
- Pour les moyennes de puissance : utiliser "mean" directement
- Pour les co√ªts : inclure le tarif (0.20‚Ç¨/kWh par d√©faut)
- Pour les comparaisons : utiliser des p√©riodes coh√©rentes
- Pour les pr√©visions : v√©rifier que le mod√®le est support√©

G√©n√®re un plan JSON pour r√©pondre √† cette question.
Utilise les outils appropri√©s et respecte les d√©pendances.
Estime la complexit√© et la dur√©e d'ex√©cution.
Utilise TOUJOURS des p√©riodes relatives et JAMAIS de dates fixes.

R√©ponds UNIQUEMENT avec le JSON du plan :"""

    @classmethod
    def get_validation_prompt(cls) -> str:
        """Retourne le prompt de validation"""
        return """Valide ce plan JSON g√©n√©r√© :

1. Structure JSON valide ?
2. Outils utilis√©s existent ?
3. D√©pendances coh√©rentes ?
4. Param√®tres corrects ?
5. Complexit√© estim√©e r√©aliste ?
6. Utilise-t-il des p√©riodes relatives (pas de dates fixes) ?

Si le plan est invalide, explique pourquoi et propose une correction."""

    @classmethod
    def get_example_plans(cls) -> Dict[str, Any]:
        """Retourne des exemples de plans pour l'apprentissage"""
        return {
            "simple_history": {
                "metadata": {
                    "plan_id": "plan_001",
                    "question_type": "history",
                    "complexity": "simple",
                    "estimated_duration": 2
                },
                "steps": [
                    {
                        "step_id": 1,
                        "tool_name": "aggregate",
                        "description": "R√©cup√©rer les donn√©es de consommation des 7 derniers jours",
                        "parameters": {
                            "period": "7d",
                            "aggregation": "sum"
                        }
                    }
                ],
                "summary": "Plan simple pour r√©cup√©rer l'historique de consommation"
            },
            "complex_forecast": {
                "metadata": {
                    "plan_id": "plan_002",
                    "question_type": "forecast",
                    "complexity": "complex",
                    "estimated_duration": 10
                },
                "steps": [
                    {
                        "step_id": 1,
                        "tool_name": "aggregate",
                        "description": "R√©cup√©rer l'historique complet pour l'entra√Ænement",
                        "parameters": {
                            "period": "90d",
                            "aggregation": "sum"
                        }
                    },
                    {
                        "step_id": 2,
                        "tool_name": "forecast",
                        "description": "G√©n√©rer les pr√©visions pour les 7 prochains jours",
                        "parameters": {
                            "horizon": "7d",
                            "model": "simple"
                        },
                        "depends_on": [1]
                    },
                    {
                        "step_id": 3,
                        "tool_name": "plot",
                        "description": "Cr√©er un graphique des pr√©visions",
                        "parameters": {
                            "chart_type": "forecast_dashboard",
                            "period": "7d"
                        },
                        "depends_on": [1, 2]
                    }
                ],
                "summary": "Plan complexe pour g√©n√©rer et visualiser des pr√©visions"
            }
        }

# Fonction utilitaire pour formater les prompts
def format_plan_prompt(question: str) -> str:
    """Formate le prompt complet pour une question avec dates dynamiques"""
    system_prompt = PlanGeneratorPrompt.get_system_prompt()
    user_prompt = PlanGeneratorPrompt.get_user_prompt(question)
    
    return f"{system_prompt}\n\n{user_prompt}"
