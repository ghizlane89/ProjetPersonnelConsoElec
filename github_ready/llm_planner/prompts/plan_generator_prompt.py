#!/usr/bin/env python3
"""
ðŸŽ¯ PROMPT JSON STRICT - GÃ‰NÃ‰RATEUR DE PLANS LLM
===============================================

Template de prompt strict pour gÃ©nÃ©rer des plans JSON valides.
Garantit la cohÃ©rence et la qualitÃ© des plans gÃ©nÃ©rÃ©s par le LLM.

CritÃ¨res d'acceptation :
- Prompt JSON strict dÃ©fini
- Instructions claires
- Exemples de plans valides
- Dates dynamiques basÃ©es sur la date rÃ©elle
"""

from typing import Dict, Any

class PlanGeneratorPrompt:
    """GÃ©nÃ©rateur de prompts JSON stricts pour le LLM"""
    
    # Outils disponibles - Compatible avec les nouvelles capacitÃ©s gÃ©nÃ©riques
    AVAILABLE_TOOLS = [
        "aggregate",           # â†’ execute_temporal_aggregation (consommation par pÃ©riode)
        "cost",               # â†’ execute_cost_calculation (coÃ»ts et Ã©conomies)
        "zone_comparison",    # â†’ execute_zone_comparison (sous-compteurs)
        "forecast",           # â†’ capacitÃ© future
        "plot"                # â†’ visualisation
    ]
    

    
    @classmethod
    def get_system_prompt(cls) -> str:
        """Retourne le prompt systÃ¨me agentique minimal"""
        return f"""RÃ”LE: Traducteur question â†’ JSON

OUTILS: {', '.join(cls.AVAILABLE_TOOLS)}

STRUCTURE:
{{
  "steps": [{{"step_id": 1, "tool_name": "outil", "parameters": {{}}, "description": "action"}}],
  "summary": "rÃ©sumÃ©"
}}

RÃˆGLE: JSON uniquement."""

    @classmethod
    def get_user_prompt(cls, question: str) -> str:
        """Retourne le prompt utilisateur pour une question donnÃ©e"""
        return f'"{question}" â†’ JSON:'

    @classmethod
    def get_validation_prompt(cls) -> str:
        """Retourne le prompt de validation"""
        return "JSON valide?"

    @classmethod
    def get_example_plans(cls) -> Dict[str, Any]:
        """Retourne des exemples de plans pour l'apprentissage"""
        return {
            "simple_history": {
                "metadata": {
                    "plan_id": "plan_001",
                    "question_type": "history",
                    "complexity": "simple",
                    "estimated_duration": 2
                },
                "steps": [
                    {
                        "step_id": 1,
                        "tool_name": "aggregate",
                        "description": "RÃ©cupÃ©rer les donnÃ©es de consommation des 7 derniers jours",
                        "parameters": {
                            "period": "7d",
                            "aggregation": "sum"
                        }
                    }
                ],
                "summary": "Plan simple pour rÃ©cupÃ©rer l'historique de consommation"
            },
            "complex_forecast": {
                "metadata": {
                    "plan_id": "plan_002",
                    "question_type": "forecast",
                    "complexity": "complex",
                    "estimated_duration": 10
                },
                "steps": [
                    {
                        "step_id": 1,
                        "tool_name": "aggregate",
                        "description": "RÃ©cupÃ©rer l'historique complet pour l'entraÃ®nement",
                        "parameters": {
                            "period": "90d",
                            "aggregation": "sum"
                        }
                    },
                    {
                        "step_id": 2,
                        "tool_name": "forecast",
                        "description": "GÃ©nÃ©rer les prÃ©visions pour les 7 prochains jours",
                        "parameters": {
                            "horizon": "7d",
                            "model": "simple"
                        },
                        "depends_on": [1]
                    },
                    {
                        "step_id": 3,
                        "tool_name": "plot",
                        "description": "CrÃ©er un graphique des prÃ©visions",
                        "parameters": {
                            "chart_type": "forecast_dashboard",
                            "period": "7d"
                        },
                        "depends_on": [1, 2]
                    }
                ],
                "summary": "Plan complexe pour gÃ©nÃ©rer et visualiser des prÃ©visions"
            }
        }

# Fonction utilitaire pour formater les prompts
def format_plan_prompt(question: str) -> str:
    """Formate le prompt complet pour une question avec dates dynamiques"""
    system_prompt = PlanGeneratorPrompt.get_system_prompt()
    user_prompt = PlanGeneratorPrompt.get_user_prompt(question)
    
    return f"{system_prompt}\n\n{user_prompt}"
