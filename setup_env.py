#!/usr/bin/env python3
"""
Configuration script for Energy Agent
Sets up environment variables and checks system status
"""

import os
import sys

def setup_environment():
    """Configure environment variables for Energy Agent"""
    
    print("üîß Configuration de l'environnement Energy Agent")
    print("=" * 50)
    
    # Check if GEMINI_API_KEY is set
    gemini_key = os.getenv('GEMINI_API_KEY')
    if not gemini_key:
        print("‚ö†Ô∏è  GEMINI_API_KEY non configur√©e")
        print("üìù Pour configurer votre cl√© API Gemini :")
        print("   1. Obtenez une cl√© API sur https://makersuite.google.com/app/apikey")
        print("   2. Ex√©cutez : export GEMINI_API_KEY='votre_cl√©_api'")
        print("   3. Ou ajoutez-la √† votre fichier ~/.bashrc ou ~/.zshrc")
        print()
        return False
    else:
        print(f"‚úÖ GEMINI_API_KEY configur√©e (d√©but: {gemini_key[:10]}...)")
    
    # Check database
    db_path = "data_genere/processed/energy_fictional_2h.duckdb"
    if os.path.exists(db_path):
        print(f"‚úÖ Base de donn√©es trouv√©e : {db_path}")
        try:
            import duckdb
            conn = duckdb.connect(db_path)
            count = conn.execute("SELECT COUNT(*) FROM energy_data").fetchone()[0]
            print(f"üìä Donn√©es disponibles : {count:,} lignes")
            conn.close()
        except Exception as e:
            print(f"‚ùå Erreur base de donn√©es : {e}")
            return False
    else:
        print(f"‚ùå Base de donn√©es manquante : {db_path}")
        return False
    
    print()
    print("üéâ Configuration termin√©e avec succ√®s !")
    return True

def show_usage():
    """Show usage instructions"""
    print()
    print("üöÄ UTILISATION")
    print("=" * 30)
    print("1. Configurez GEMINI_API_KEY :")
    print("   export GEMINI_API_KEY='votre_cl√©_api_gemini'")
    print()
    print("2. Lancez l'application :")
    print("   streamlit run app2.py")
    print()
    print("3. Acc√©dez √† l'interface :")
    print("   http://localhost:8501")

if __name__ == "__main__":
    success = setup_environment()
    show_usage()
    
    if not success:
        sys.exit(1)

